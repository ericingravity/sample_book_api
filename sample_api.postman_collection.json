{
	"info": {
		"_postman_id": "24ee5adf-ae73-475a-b5a0-0fb22782a861",
		"name": "Python API Test",
		"description": "Add, search for, and delete a book.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14886686"
	},
	"item": [
		{
			"name": "Add new book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// book title",
							"const randomTitle = pm.variables.replaceIn(\"{{$randomWords}}\");",
							"pm.collectionVariables.set(\"randomTitle\", randomTitle)",
							"",
							"// book author",
							"const randomAuthor = pm.variables.replaceIn(\"{{$randomFullName}}\")",
							"pm.collectionVariables.set(\"randomAuthor\", randomAuthor)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// return 201",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// store new ID to delete later",
							"const jsonData = pm.response.json();",
							"var idToDelete = jsonData.book.id;",
							"pm.collectionVariables.set(\"idToDelete\", idToDelete)",
							"",
							"// verify schema",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"book\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"author\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"id\": {",
							"                \"type\": \"integer\"",
							"                },",
							"                \"title\": {",
							"                \"type\": \"string\"",
							"                }",
							"        },",
							"        \"required\": [\"author\", \"id\", \"title\"]",
							"        },",
							"        \"message\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"required\": [\"book\", \"message\"]",
							"}",
							"",
							"pm.test('Schema is valid', () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{randomTitle}}\",\n    \"author\": \"{{randomAuthor}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// return 200 expected",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// verify schema",
							"const schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"    \"title\": \"Book List Schema\",",
							"    \"type\": \"array\",",
							"    \"items\": {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"author\": {",
							"                \"type\": \"string\",",
							"            },",
							"            \"id\": {",
							"                \"type\": \"integer\",",
							"            },",
							"            \"title\": {",
							"                \"type\": \"string\",",
							"            }",
							"        },",
							"        \"required\": [\"author\", \"id\", \"title\"]",
							"    }",
							"}",
							"",
							"pm.test('Schema is valid', () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "author",
							"value": "Ben",
							"disabled": true
						},
						{
							"key": "title",
							"value": "Fake",
							"disabled": true
						},
						{
							"key": "madeupvar",
							"value": "lolwhat",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book - Single ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// verify the expected ID is the one deleted",
							"pm.test(\"Book ID is in delete message\", function () {",
							"    const jsonData = pm.response.json();",
							"    const message = jsonData.message;",
							"    const bookId = pm.collectionVariables.get(\"idToDelete\"); ",
							"    pm.expect(message).to.include(bookId.toString()); ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books/:book_id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						":book_id"
					],
					"variable": [
						{
							"key": "book_id",
							"value": "{{idToDelete}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book - Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books/:book_id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						":book_id"
					],
					"variable": [
						{
							"key": "book_id",
							"value": "999999999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book - Invalid ID type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// random invalid id",
							"const badId = pm.variables.replaceIn(\"{{$randomWord}}\");",
							"pm.collectionVariables.set(\"badId\", badId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/books/:book_id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"books",
						":book_id"
					],
					"variable": [
						{
							"key": "book_id",
							"value": "{{badId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "randomAuthor",
			"value": ""
		},
		{
			"key": "idToDelete",
			"value": ""
		},
		{
			"key": "randomString",
			"value": ""
		},
		{
			"key": "badId",
			"value": ""
		}
	]
}